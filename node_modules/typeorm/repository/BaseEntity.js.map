{"version":3,"sources":["../../src/repository/BaseEntity.ts"],"names":[],"mappings":"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","file":"BaseEntity.js","sourcesContent":["import { Repository } from \"./Repository\"\nimport { getConnection } from \"../globals\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { ObjectID } from \"../driver/mongodb/typings\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used in all static methods of the BaseEntity.\n     */\n    // @ts-ignore: Unused variable which is actually used\n    private static usedConnection?: DataSource\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        return (this.constructor as any).getRepository().hasId(this)\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().save(this, options)\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(options?: RemoveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().remove(this, options)\n    }\n\n    /**\n     * Records the delete date of current entity.\n     */\n    softRemove(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any)\n            .getRepository()\n            .softRemove(this, options)\n    }\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().recover(this, options)\n    }\n\n    /**\n     * Reloads entity data from the database.\n     */\n    async reload(): Promise<void> {\n        const base: any = this.constructor\n        const newestEntity: BaseEntity = await base\n            .getRepository()\n            .findOneOrFail(base.getId(this))\n\n        ObjectUtils.assign(this, newestEntity)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets connection to be used by entity.\n     */\n    static useConnection(connection: DataSource) {\n        this.usedConnection = connection\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(\n        this: ObjectType<T>,\n    ): Repository<T> {\n        const connection: DataSource =\n            (this as any).usedConnection || getConnection()\n        return connection.getRepository<T>(this)\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): EntityTarget<any> {\n        return this.getRepository().target\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(this: ObjectType<T>, entity: T): any {\n        return (this as any).getRepository().getId(entity)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(\n        this: ObjectType<T>,\n        alias?: string,\n    ): SelectQueryBuilder<T> {\n        return (this as any).getRepository().createQueryBuilder(alias)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(\n        this: ObjectType<T> & typeof BaseEntity,\n    ): T\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: ObjectType<T> & typeof BaseEntity,\n        entityLikeArray: DeepPartial<T>[],\n    ): T[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: ObjectType<T> & typeof BaseEntity,\n        entityLike: DeepPartial<T>,\n    ): T\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: ObjectType<T> & typeof BaseEntity,\n        entityOrEntities?: any,\n    ): T {\n        return (this as any).getRepository().create(entityOrEntities)\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(\n        this: ObjectType<T>,\n        mergeIntoEntity: T,\n        ...entityLikes: DeepPartial<T>[]\n    ): T {\n        return (this as any)\n            .getRepository()\n            .merge(mergeIntoEntity, ...entityLikes)\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entityLike: DeepPartial<T>,\n    ): Promise<T | undefined> {\n        const thisRepository = (this as any).getRepository() as Repository<T>\n        return thisRepository.preload(entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return (this as any)\n            .getRepository()\n            .save(entityOrEntities as any, options)\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entities: T[],\n        options?: RemoveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entity: T,\n        options?: RemoveOptions,\n    ): Promise<T>\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entityOrEntities: T | T[],\n        options?: RemoveOptions,\n    ): Promise<T | T[]> {\n        return (this as any)\n            .getRepository()\n            .remove(entityOrEntities as any, options)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return (this as any)\n            .getRepository()\n            .softRemove(entityOrEntities as any, options)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    static insert<T extends BaseEntity>(\n        this: ObjectType<T>,\n        entity: QueryDeepPartialEntity<T> | QueryDeepPartialEntity<T>[],\n        options?: SaveOptions,\n    ): Promise<InsertResult> {\n        return (this as any).getRepository().insert(entity, options)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    static update<T extends BaseEntity>(\n        this: ObjectType<T>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindOptionsWhere<T>,\n        partialEntity: QueryDeepPartialEntity<T>,\n        options?: SaveOptions,\n    ): Promise<UpdateResult> {\n        return (this as any)\n            .getRepository()\n            .update(criteria, partialEntity, options)\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    static upsert<T extends BaseEntity>(\n        this: ObjectType<T> & typeof BaseEntity,\n        entityOrEntities:\n            | QueryDeepPartialEntity<T>\n            | QueryDeepPartialEntity<T>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<T>,\n    ): Promise<InsertResult> {\n        return this.getRepository<T>().upsert(\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    static delete<T extends BaseEntity>(\n        this: ObjectType<T>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindOptionsWhere<T>,\n        options?: RemoveOptions,\n    ): Promise<DeleteResult> {\n        return (this as any).getRepository().delete(criteria, options)\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(\n        this: ObjectType<T>,\n        options?: FindManyOptions<T>,\n    ): Promise<number> {\n        return (this as any).getRepository().count(options)\n    }\n\n    /**\n     * Counts entities that match given WHERE conditions.\n     */\n    static countBy<T extends BaseEntity>(\n        this: ObjectType<T>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number> {\n        return (this as any).getRepository().count(where)\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(\n        this: ObjectType<T>,\n        options?: FindManyOptions<T>,\n    ): Promise<T[]> {\n        return (this as any).getRepository().find(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     */\n    static findBy<T extends BaseEntity>(\n        this: ObjectType<T>,\n        where: FindOptionsWhere<T>,\n    ): Promise<T[]> {\n        return (this as any).getRepository().find(where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(\n        this: ObjectType<T>,\n        options?: FindManyOptions<T>,\n    ): Promise<[T[], number]> {\n        return (this as any).getRepository().findAndCount(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCountBy<T extends BaseEntity>(\n        this: ObjectType<T>,\n        where: FindOptionsWhere<T>,\n    ): Promise<[T[], number]> {\n        return (this as any).getRepository().findAndCount(where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    static findByIds<T extends BaseEntity>(\n        this: ObjectType<T>,\n        ids: any[],\n    ): Promise<T[]> {\n        return (this as any).getRepository().findByIdsBy(ids)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(\n        this: ObjectType<T>,\n        options: FindOneOptions<T>,\n    ): Promise<T | null> {\n        return (this as any).getRepository().findOne(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneBy<T extends BaseEntity>(\n        this: ObjectType<T>,\n        where?: FindOptionsWhere<T>,\n    ): Promise<T | null> {\n        return (this as any).getRepository().findOneBy(where)\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    static findOneById<T extends BaseEntity>(\n        this: ObjectType<T>,\n        id?: string | number | Date | ObjectID,\n    ): Promise<T | null> {\n        return (this as any).getRepository().findOneById(id)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(\n        this: ObjectType<T>,\n        options: FindOneOptions<T>,\n    ): Promise<T> {\n        return (this as any).getRepository().findOneOrFail(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneByOrFail<T extends BaseEntity>(\n        this: ObjectType<T>,\n        where?: FindOptionsWhere<T>,\n    ): Promise<T> {\n        return (this as any).getRepository().findOneByOrFail(where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(\n        this: ObjectType<T>,\n        query: string,\n        parameters?: any[],\n    ): Promise<any> {\n        return (this as any).getRepository().query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(this: ObjectType<T>): Promise<void> {\n        return (this as any).getRepository().clear()\n    }\n}\n"],"sourceRoot":".."}